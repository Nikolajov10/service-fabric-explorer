import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import { AddWindowEvent, MainWindow } from './mainWindow';
import { MainWindowEvents } from './events';
import { SettingsService } from './settings';
import { ClusterManager, ICluster } from './cluster-manager';
import { httpHandler } from './httpHandler';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = async () => {
  // Create the browser window.
  const bw = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  const mainWindow = new MainWindow(bw);

  const settingService = new SettingsService();
  const clusterManager = new ClusterManager(settingService, mainWindow);
  

  //CLUSTER DATA OPERATIONS
  ipcMain.on(MainWindowEvents.addCluster, (event, data: ICluster) => {
    clusterManager.addCluster(data);
    console.log(clusterManager);
  })

  ipcMain.on(MainWindowEvents.removeCluster, (event, data: ICluster) => {
    clusterManager.removeCluster(data.id);
  })

  ipcMain.on(MainWindowEvents.editCluster, (event, data: ICluster) => {
    clusterManager.updateCluster(data);
  })

  ipcMain.on(MainWindowEvents.reconnectCluster, (event, data: ICluster) => {
    clusterManager.reconnectCluster(data);
  })

  //EXPOSED ELECTRON OPERATIONS
  ipcMain.handle(MainWindowEvents.sendHttpRequest, async (event, data: any) => {
    // console.log(event, data)
    const cluster = clusterManager.windowToCluster[event.sender.id];
    const hh: httpHandler = clusterManager.httpHandlers[cluster.id];
    return await hh.requestAsync(data)
  })

  
  ipcMain.handle(MainWindowEvents.requestFileDialog, async (event, data: string) => {
    return await dialog.showOpenDialog({
      properties: ['openFile']
    })
  })


  //SEND DATA TO RENDERERS
  clusterManager.observable.subscribe(data => {
    bw.webContents.send(MainWindowEvents.clusterStatesChange, data);
  })




  console.log(ipcMain.eventNames())

  await mainWindow.loadAsync();
  clusterManager.emitState();

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
